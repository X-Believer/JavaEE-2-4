/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 2819.0, "series": [{"data": [[0.0, 5.0], [0.1, 6.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 9.0], [1.4, 9.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 11.0], [2.1, 11.0], [2.2, 11.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 15.0], [3.8, 16.0], [3.9, 16.0], [4.0, 16.0], [4.1, 17.0], [4.2, 17.0], [4.3, 18.0], [4.4, 18.0], [4.5, 18.0], [4.6, 19.0], [4.7, 19.0], [4.8, 19.0], [4.9, 20.0], [5.0, 20.0], [5.1, 21.0], [5.2, 21.0], [5.3, 22.0], [5.4, 22.0], [5.5, 23.0], [5.6, 23.0], [5.7, 24.0], [5.8, 25.0], [5.9, 25.0], [6.0, 26.0], [6.1, 26.0], [6.2, 27.0], [6.3, 28.0], [6.4, 29.0], [6.5, 31.0], [6.6, 32.0], [6.7, 32.0], [6.8, 33.0], [6.9, 34.0], [7.0, 34.0], [7.1, 36.0], [7.2, 36.0], [7.3, 38.0], [7.4, 39.0], [7.5, 40.0], [7.6, 41.0], [7.7, 42.0], [7.8, 43.0], [7.9, 43.0], [8.0, 44.0], [8.1, 44.0], [8.2, 45.0], [8.3, 46.0], [8.4, 46.0], [8.5, 47.0], [8.6, 48.0], [8.7, 48.0], [8.8, 49.0], [8.9, 49.0], [9.0, 50.0], [9.1, 50.0], [9.2, 50.0], [9.3, 51.0], [9.4, 51.0], [9.5, 52.0], [9.6, 53.0], [9.7, 53.0], [9.8, 53.0], [9.9, 54.0], [10.0, 54.0], [10.1, 54.0], [10.2, 55.0], [10.3, 55.0], [10.4, 56.0], [10.5, 56.0], [10.6, 57.0], [10.7, 57.0], [10.8, 58.0], [10.9, 58.0], [11.0, 59.0], [11.1, 59.0], [11.2, 60.0], [11.3, 60.0], [11.4, 61.0], [11.5, 61.0], [11.6, 62.0], [11.7, 63.0], [11.8, 63.0], [11.9, 64.0], [12.0, 65.0], [12.1, 65.0], [12.2, 66.0], [12.3, 66.0], [12.4, 67.0], [12.5, 68.0], [12.6, 68.0], [12.7, 68.0], [12.8, 69.0], [12.9, 69.0], [13.0, 70.0], [13.1, 71.0], [13.2, 71.0], [13.3, 71.0], [13.4, 72.0], [13.5, 72.0], [13.6, 72.0], [13.7, 73.0], [13.8, 74.0], [13.9, 75.0], [14.0, 76.0], [14.1, 77.0], [14.2, 78.0], [14.3, 79.0], [14.4, 79.0], [14.5, 81.0], [14.6, 82.0], [14.7, 83.0], [14.8, 83.0], [14.9, 85.0], [15.0, 86.0], [15.1, 87.0], [15.2, 89.0], [15.3, 90.0], [15.4, 91.0], [15.5, 92.0], [15.6, 93.0], [15.7, 94.0], [15.8, 94.0], [15.9, 95.0], [16.0, 96.0], [16.1, 97.0], [16.2, 98.0], [16.3, 99.0], [16.4, 100.0], [16.5, 100.0], [16.6, 101.0], [16.7, 102.0], [16.8, 103.0], [16.9, 104.0], [17.0, 105.0], [17.1, 106.0], [17.2, 106.0], [17.3, 107.0], [17.4, 107.0], [17.5, 108.0], [17.6, 108.0], [17.7, 108.0], [17.8, 109.0], [17.9, 109.0], [18.0, 110.0], [18.1, 111.0], [18.2, 111.0], [18.3, 112.0], [18.4, 112.0], [18.5, 113.0], [18.6, 113.0], [18.7, 114.0], [18.8, 114.0], [18.9, 114.0], [19.0, 115.0], [19.1, 115.0], [19.2, 116.0], [19.3, 116.0], [19.4, 117.0], [19.5, 117.0], [19.6, 118.0], [19.7, 118.0], [19.8, 119.0], [19.9, 119.0], [20.0, 119.0], [20.1, 120.0], [20.2, 120.0], [20.3, 121.0], [20.4, 122.0], [20.5, 122.0], [20.6, 123.0], [20.7, 123.0], [20.8, 124.0], [20.9, 124.0], [21.0, 124.0], [21.1, 124.0], [21.2, 125.0], [21.3, 125.0], [21.4, 125.0], [21.5, 126.0], [21.6, 126.0], [21.7, 127.0], [21.8, 127.0], [21.9, 128.0], [22.0, 128.0], [22.1, 128.0], [22.2, 129.0], [22.3, 129.0], [22.4, 129.0], [22.5, 130.0], [22.6, 130.0], [22.7, 131.0], [22.8, 131.0], [22.9, 131.0], [23.0, 131.0], [23.1, 132.0], [23.2, 132.0], [23.3, 132.0], [23.4, 133.0], [23.5, 133.0], [23.6, 133.0], [23.7, 134.0], [23.8, 134.0], [23.9, 134.0], [24.0, 135.0], [24.1, 135.0], [24.2, 135.0], [24.3, 136.0], [24.4, 136.0], [24.5, 136.0], [24.6, 136.0], [24.7, 137.0], [24.8, 137.0], [24.9, 137.0], [25.0, 137.0], [25.1, 138.0], [25.2, 138.0], [25.3, 139.0], [25.4, 139.0], [25.5, 140.0], [25.6, 140.0], [25.7, 140.0], [25.8, 141.0], [25.9, 141.0], [26.0, 141.0], [26.1, 142.0], [26.2, 142.0], [26.3, 142.0], [26.4, 143.0], [26.5, 143.0], [26.6, 143.0], [26.7, 144.0], [26.8, 144.0], [26.9, 144.0], [27.0, 145.0], [27.1, 145.0], [27.2, 145.0], [27.3, 146.0], [27.4, 146.0], [27.5, 146.0], [27.6, 146.0], [27.7, 147.0], [27.8, 147.0], [27.9, 147.0], [28.0, 147.0], [28.1, 148.0], [28.2, 148.0], [28.3, 148.0], [28.4, 148.0], [28.5, 149.0], [28.6, 149.0], [28.7, 149.0], [28.8, 149.0], [28.9, 150.0], [29.0, 150.0], [29.1, 150.0], [29.2, 150.0], [29.3, 150.0], [29.4, 151.0], [29.5, 151.0], [29.6, 151.0], [29.7, 151.0], [29.8, 152.0], [29.9, 152.0], [30.0, 152.0], [30.1, 152.0], [30.2, 152.0], [30.3, 153.0], [30.4, 153.0], [30.5, 153.0], [30.6, 153.0], [30.7, 153.0], [30.8, 154.0], [30.9, 154.0], [31.0, 154.0], [31.1, 154.0], [31.2, 154.0], [31.3, 155.0], [31.4, 155.0], [31.5, 155.0], [31.6, 155.0], [31.7, 155.0], [31.8, 156.0], [31.9, 156.0], [32.0, 156.0], [32.1, 156.0], [32.2, 157.0], [32.3, 157.0], [32.4, 157.0], [32.5, 157.0], [32.6, 157.0], [32.7, 158.0], [32.8, 158.0], [32.9, 158.0], [33.0, 158.0], [33.1, 159.0], [33.2, 159.0], [33.3, 159.0], [33.4, 159.0], [33.5, 160.0], [33.6, 160.0], [33.7, 160.0], [33.8, 160.0], [33.9, 161.0], [34.0, 161.0], [34.1, 161.0], [34.2, 161.0], [34.3, 162.0], [34.4, 162.0], [34.5, 162.0], [34.6, 162.0], [34.7, 162.0], [34.8, 163.0], [34.9, 163.0], [35.0, 163.0], [35.1, 163.0], [35.2, 163.0], [35.3, 164.0], [35.4, 164.0], [35.5, 164.0], [35.6, 164.0], [35.7, 165.0], [35.8, 165.0], [35.9, 165.0], [36.0, 165.0], [36.1, 165.0], [36.2, 165.0], [36.3, 166.0], [36.4, 166.0], [36.5, 166.0], [36.6, 166.0], [36.7, 167.0], [36.8, 167.0], [36.9, 167.0], [37.0, 167.0], [37.1, 167.0], [37.2, 168.0], [37.3, 168.0], [37.4, 168.0], [37.5, 168.0], [37.6, 168.0], [37.7, 168.0], [37.8, 169.0], [37.9, 169.0], [38.0, 169.0], [38.1, 169.0], [38.2, 169.0], [38.3, 170.0], [38.4, 170.0], [38.5, 170.0], [38.6, 171.0], [38.7, 171.0], [38.8, 171.0], [38.9, 172.0], [39.0, 172.0], [39.1, 172.0], [39.2, 172.0], [39.3, 173.0], [39.4, 173.0], [39.5, 173.0], [39.6, 173.0], [39.7, 174.0], [39.8, 174.0], [39.9, 174.0], [40.0, 175.0], [40.1, 175.0], [40.2, 175.0], [40.3, 176.0], [40.4, 176.0], [40.5, 176.0], [40.6, 177.0], [40.7, 177.0], [40.8, 177.0], [40.9, 177.0], [41.0, 177.0], [41.1, 178.0], [41.2, 178.0], [41.3, 179.0], [41.4, 179.0], [41.5, 179.0], [41.6, 179.0], [41.7, 180.0], [41.8, 180.0], [41.9, 180.0], [42.0, 181.0], [42.1, 181.0], [42.2, 181.0], [42.3, 181.0], [42.4, 181.0], [42.5, 182.0], [42.6, 182.0], [42.7, 182.0], [42.8, 182.0], [42.9, 182.0], [43.0, 182.0], [43.1, 183.0], [43.2, 183.0], [43.3, 183.0], [43.4, 183.0], [43.5, 183.0], [43.6, 184.0], [43.7, 184.0], [43.8, 184.0], [43.9, 184.0], [44.0, 184.0], [44.1, 184.0], [44.2, 184.0], [44.3, 185.0], [44.4, 185.0], [44.5, 185.0], [44.6, 185.0], [44.7, 185.0], [44.8, 185.0], [44.9, 185.0], [45.0, 186.0], [45.1, 186.0], [45.2, 186.0], [45.3, 186.0], [45.4, 186.0], [45.5, 186.0], [45.6, 186.0], [45.7, 186.0], [45.8, 187.0], [45.9, 187.0], [46.0, 187.0], [46.1, 187.0], [46.2, 187.0], [46.3, 187.0], [46.4, 188.0], [46.5, 188.0], [46.6, 188.0], [46.7, 188.0], [46.8, 188.0], [46.9, 188.0], [47.0, 188.0], [47.1, 189.0], [47.2, 189.0], [47.3, 189.0], [47.4, 189.0], [47.5, 189.0], [47.6, 189.0], [47.7, 189.0], [47.8, 189.0], [47.9, 189.0], [48.0, 190.0], [48.1, 190.0], [48.2, 190.0], [48.3, 190.0], [48.4, 190.0], [48.5, 190.0], [48.6, 190.0], [48.7, 191.0], [48.8, 191.0], [48.9, 191.0], [49.0, 191.0], [49.1, 191.0], [49.2, 191.0], [49.3, 191.0], [49.4, 191.0], [49.5, 192.0], [49.6, 192.0], [49.7, 192.0], [49.8, 192.0], [49.9, 192.0], [50.0, 193.0], [50.1, 193.0], [50.2, 193.0], [50.3, 193.0], [50.4, 193.0], [50.5, 193.0], [50.6, 193.0], [50.7, 194.0], [50.8, 194.0], [50.9, 194.0], [51.0, 194.0], [51.1, 194.0], [51.2, 194.0], [51.3, 194.0], [51.4, 194.0], [51.5, 195.0], [51.6, 195.0], [51.7, 195.0], [51.8, 195.0], [51.9, 195.0], [52.0, 196.0], [52.1, 196.0], [52.2, 196.0], [52.3, 196.0], [52.4, 196.0], [52.5, 196.0], [52.6, 197.0], [52.7, 197.0], [52.8, 197.0], [52.9, 197.0], [53.0, 197.0], [53.1, 197.0], [53.2, 198.0], [53.3, 198.0], [53.4, 198.0], [53.5, 198.0], [53.6, 198.0], [53.7, 198.0], [53.8, 198.0], [53.9, 198.0], [54.0, 199.0], [54.1, 199.0], [54.2, 199.0], [54.3, 199.0], [54.4, 199.0], [54.5, 200.0], [54.6, 200.0], [54.7, 200.0], [54.8, 200.0], [54.9, 201.0], [55.0, 201.0], [55.1, 201.0], [55.2, 202.0], [55.3, 202.0], [55.4, 202.0], [55.5, 202.0], [55.6, 203.0], [55.7, 203.0], [55.8, 204.0], [55.9, 204.0], [56.0, 204.0], [56.1, 205.0], [56.2, 205.0], [56.3, 206.0], [56.4, 206.0], [56.5, 207.0], [56.6, 207.0], [56.7, 207.0], [56.8, 208.0], [56.9, 208.0], [57.0, 209.0], [57.1, 209.0], [57.2, 210.0], [57.3, 210.0], [57.4, 210.0], [57.5, 210.0], [57.6, 211.0], [57.7, 211.0], [57.8, 211.0], [57.9, 211.0], [58.0, 212.0], [58.1, 212.0], [58.2, 212.0], [58.3, 212.0], [58.4, 213.0], [58.5, 213.0], [58.6, 213.0], [58.7, 213.0], [58.8, 214.0], [58.9, 214.0], [59.0, 214.0], [59.1, 214.0], [59.2, 215.0], [59.3, 215.0], [59.4, 215.0], [59.5, 215.0], [59.6, 215.0], [59.7, 216.0], [59.8, 216.0], [59.9, 216.0], [60.0, 216.0], [60.1, 217.0], [60.2, 217.0], [60.3, 218.0], [60.4, 218.0], [60.5, 218.0], [60.6, 219.0], [60.7, 219.0], [60.8, 220.0], [60.9, 221.0], [61.0, 222.0], [61.1, 222.0], [61.2, 223.0], [61.3, 224.0], [61.4, 224.0], [61.5, 225.0], [61.6, 226.0], [61.7, 228.0], [61.8, 229.0], [61.9, 230.0], [62.0, 231.0], [62.1, 232.0], [62.2, 233.0], [62.3, 233.0], [62.4, 234.0], [62.5, 235.0], [62.6, 235.0], [62.7, 236.0], [62.8, 236.0], [62.9, 237.0], [63.0, 237.0], [63.1, 238.0], [63.2, 239.0], [63.3, 240.0], [63.4, 241.0], [63.5, 242.0], [63.6, 243.0], [63.7, 245.0], [63.8, 246.0], [63.9, 248.0], [64.0, 249.0], [64.1, 251.0], [64.2, 252.0], [64.3, 254.0], [64.4, 256.0], [64.5, 258.0], [64.6, 260.0], [64.7, 261.0], [64.8, 262.0], [64.9, 264.0], [65.0, 265.0], [65.1, 266.0], [65.2, 269.0], [65.3, 270.0], [65.4, 270.0], [65.5, 271.0], [65.6, 272.0], [65.7, 274.0], [65.8, 275.0], [65.9, 276.0], [66.0, 278.0], [66.1, 279.0], [66.2, 280.0], [66.3, 281.0], [66.4, 282.0], [66.5, 283.0], [66.6, 283.0], [66.7, 285.0], [66.8, 286.0], [66.9, 287.0], [67.0, 289.0], [67.1, 290.0], [67.2, 293.0], [67.3, 296.0], [67.4, 300.0], [67.5, 305.0], [67.6, 310.0], [67.7, 313.0], [67.8, 317.0], [67.9, 319.0], [68.0, 322.0], [68.1, 323.0], [68.2, 324.0], [68.3, 325.0], [68.4, 325.0], [68.5, 328.0], [68.6, 329.0], [68.7, 330.0], [68.8, 331.0], [68.9, 332.0], [69.0, 332.0], [69.1, 333.0], [69.2, 334.0], [69.3, 335.0], [69.4, 336.0], [69.5, 336.0], [69.6, 337.0], [69.7, 338.0], [69.8, 338.0], [69.9, 339.0], [70.0, 339.0], [70.1, 340.0], [70.2, 341.0], [70.3, 342.0], [70.4, 342.0], [70.5, 343.0], [70.6, 343.0], [70.7, 344.0], [70.8, 345.0], [70.9, 346.0], [71.0, 347.0], [71.1, 348.0], [71.2, 349.0], [71.3, 350.0], [71.4, 351.0], [71.5, 351.0], [71.6, 352.0], [71.7, 352.0], [71.8, 353.0], [71.9, 353.0], [72.0, 354.0], [72.1, 355.0], [72.2, 356.0], [72.3, 357.0], [72.4, 357.0], [72.5, 358.0], [72.6, 359.0], [72.7, 360.0], [72.8, 361.0], [72.9, 362.0], [73.0, 362.0], [73.1, 363.0], [73.2, 364.0], [73.3, 365.0], [73.4, 365.0], [73.5, 365.0], [73.6, 367.0], [73.7, 367.0], [73.8, 368.0], [73.9, 369.0], [74.0, 369.0], [74.1, 370.0], [74.2, 371.0], [74.3, 371.0], [74.4, 372.0], [74.5, 372.0], [74.6, 372.0], [74.7, 373.0], [74.8, 374.0], [74.9, 374.0], [75.0, 374.0], [75.1, 374.0], [75.2, 375.0], [75.3, 375.0], [75.4, 376.0], [75.5, 376.0], [75.6, 377.0], [75.7, 377.0], [75.8, 378.0], [75.9, 378.0], [76.0, 379.0], [76.1, 379.0], [76.2, 380.0], [76.3, 380.0], [76.4, 381.0], [76.5, 382.0], [76.6, 382.0], [76.7, 383.0], [76.8, 383.0], [76.9, 384.0], [77.0, 385.0], [77.1, 386.0], [77.2, 387.0], [77.3, 388.0], [77.4, 389.0], [77.5, 390.0], [77.6, 390.0], [77.7, 391.0], [77.8, 392.0], [77.9, 392.0], [78.0, 393.0], [78.1, 394.0], [78.2, 394.0], [78.3, 395.0], [78.4, 396.0], [78.5, 396.0], [78.6, 397.0], [78.7, 398.0], [78.8, 398.0], [78.9, 399.0], [79.0, 399.0], [79.1, 400.0], [79.2, 400.0], [79.3, 401.0], [79.4, 402.0], [79.5, 402.0], [79.6, 403.0], [79.7, 404.0], [79.8, 404.0], [79.9, 405.0], [80.0, 406.0], [80.1, 407.0], [80.2, 408.0], [80.3, 409.0], [80.4, 410.0], [80.5, 411.0], [80.6, 412.0], [80.7, 413.0], [80.8, 414.0], [80.9, 415.0], [81.0, 416.0], [81.1, 418.0], [81.2, 421.0], [81.3, 424.0], [81.4, 428.0], [81.5, 429.0], [81.6, 431.0], [81.7, 432.0], [81.8, 434.0], [81.9, 437.0], [82.0, 438.0], [82.1, 440.0], [82.2, 445.0], [82.3, 450.0], [82.4, 453.0], [82.5, 455.0], [82.6, 456.0], [82.7, 460.0], [82.8, 463.0], [82.9, 467.0], [83.0, 471.0], [83.1, 474.0], [83.2, 477.0], [83.3, 485.0], [83.4, 488.0], [83.5, 492.0], [83.6, 502.0], [83.7, 506.0], [83.8, 520.0], [83.9, 527.0], [84.0, 532.0], [84.1, 534.0], [84.2, 535.0], [84.3, 538.0], [84.4, 539.0], [84.5, 540.0], [84.6, 541.0], [84.7, 543.0], [84.8, 544.0], [84.9, 545.0], [85.0, 546.0], [85.1, 546.0], [85.2, 547.0], [85.3, 548.0], [85.4, 549.0], [85.5, 550.0], [85.6, 551.0], [85.7, 553.0], [85.8, 554.0], [85.9, 555.0], [86.0, 556.0], [86.1, 557.0], [86.2, 558.0], [86.3, 559.0], [86.4, 561.0], [86.5, 563.0], [86.6, 564.0], [86.7, 566.0], [86.8, 569.0], [86.9, 572.0], [87.0, 574.0], [87.1, 576.0], [87.2, 578.0], [87.3, 579.0], [87.4, 580.0], [87.5, 581.0], [87.6, 581.0], [87.7, 582.0], [87.8, 582.0], [87.9, 583.0], [88.0, 584.0], [88.1, 584.0], [88.2, 585.0], [88.3, 586.0], [88.4, 587.0], [88.5, 588.0], [88.6, 589.0], [88.7, 590.0], [88.8, 591.0], [88.9, 591.0], [89.0, 593.0], [89.1, 594.0], [89.2, 595.0], [89.3, 595.0], [89.4, 597.0], [89.5, 598.0], [89.6, 598.0], [89.7, 600.0], [89.8, 601.0], [89.9, 602.0], [90.0, 603.0], [90.1, 604.0], [90.2, 605.0], [90.3, 605.0], [90.4, 607.0], [90.5, 607.0], [90.6, 608.0], [90.7, 612.0], [90.8, 618.0], [90.9, 629.0], [91.0, 636.0], [91.1, 646.0], [91.2, 652.0], [91.3, 658.0], [91.4, 673.0], [91.5, 678.0], [91.6, 686.0], [91.7, 699.0], [91.8, 703.0], [91.9, 728.0], [92.0, 737.0], [92.1, 743.0], [92.2, 748.0], [92.3, 749.0], [92.4, 750.0], [92.5, 751.0], [92.6, 752.0], [92.7, 753.0], [92.8, 754.0], [92.9, 756.0], [93.0, 758.0], [93.1, 760.0], [93.2, 764.0], [93.3, 765.0], [93.4, 766.0], [93.5, 768.0], [93.6, 770.0], [93.7, 773.0], [93.8, 776.0], [93.9, 779.0], [94.0, 780.0], [94.1, 783.0], [94.2, 784.0], [94.3, 787.0], [94.4, 789.0], [94.5, 790.0], [94.6, 791.0], [94.7, 793.0], [94.8, 795.0], [94.9, 797.0], [95.0, 799.0], [95.1, 800.0], [95.2, 802.0], [95.3, 804.0], [95.4, 808.0], [95.5, 812.0], [95.6, 815.0], [95.7, 846.0], [95.8, 854.0], [95.9, 868.0], [96.0, 887.0], [96.1, 898.0], [96.2, 940.0], [96.3, 953.0], [96.4, 958.0], [96.5, 965.0], [96.6, 969.0], [96.7, 971.0], [96.8, 973.0], [96.9, 978.0], [97.0, 979.0], [97.1, 984.0], [97.2, 988.0], [97.3, 991.0], [97.4, 995.0], [97.5, 998.0], [97.6, 1001.0], [97.7, 1003.0], [97.8, 1011.0], [97.9, 1079.0], [98.0, 1161.0], [98.1, 1170.0], [98.2, 1176.0], [98.3, 1181.0], [98.4, 1186.0], [98.5, 1190.0], [98.6, 1198.0], [98.7, 1205.0], [98.8, 1211.0], [98.9, 1359.0], [99.0, 1374.0], [99.1, 1385.0], [99.2, 1396.0], [99.3, 1401.0], [99.4, 1418.0], [99.5, 1585.0], [99.6, 1601.0], [99.7, 1612.0], [99.8, 1787.0], [99.9, 1991.0], [100.0, 2819.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3801.0, "series": [{"data": [[0.0, 1639.0], [600.0, 203.0], [700.0, 335.0], [800.0, 104.0], [900.0, 145.0], [1000.0, 35.0], [1100.0, 71.0], [1200.0, 24.0], [1300.0, 38.0], [1400.0, 18.0], [1500.0, 15.0], [100.0, 3801.0], [1600.0, 14.0], [1700.0, 12.0], [1800.0, 5.0], [1900.0, 3.0], [2000.0, 2.0], [2200.0, 1.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [200.0, 1299.0], [300.0, 1161.0], [400.0, 456.0], [500.0, 613.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 58.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8357.0, "series": [{"data": [[0.0, 8357.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1585.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 58.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 66.5625, "minX": 1.729007551E12, "maxY": 375.7860125260962, "series": [{"data": [[1.729007558E12, 331.8038585208997], [1.729007559E12, 356.47603833865776], [1.72900756E12, 364.87965921192745], [1.729007561E12, 375.7860125260962], [1.729007551E12, 66.5625], [1.729007562E12, 187.5000000000001], [1.729007552E12, 122.60541149943639], [1.729007553E12, 162.75681818181832], [1.729007554E12, 193.6141124586548], [1.729007555E12, 233.27193932827728], [1.729007556E12, 261.8916372202595], [1.729007557E12, 309.1370165745853]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729007562E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 809.3333333333334, "series": [{"data": [[2.0, 6.0], [4.0, 15.0], [5.0, 12.0], [6.0, 13.0], [7.0, 20.0], [8.0, 29.0], [9.0, 30.0], [10.0, 33.0], [11.0, 38.0], [13.0, 29.0], [14.0, 37.0], [15.0, 47.0], [16.0, 53.0], [17.0, 94.0], [18.0, 54.5], [19.0, 55.0], [20.0, 50.0], [21.0, 68.0], [22.0, 160.0], [23.0, 71.0], [25.0, 69.5], [26.0, 67.0], [27.0, 64.0], [28.0, 173.0], [29.0, 124.5], [30.0, 72.0], [33.0, 77.66666666666667], [32.0, 666.5], [35.0, 81.0], [34.0, 82.0], [37.0, 82.0], [36.0, 79.0], [38.0, 80.5], [41.0, 83.0], [40.0, 81.0], [43.0, 86.25], [45.0, 84.33333333333333], [47.0, 93.0], [46.0, 86.0], [49.0, 91.0], [48.0, 260.0], [51.0, 55.0], [50.0, 97.0], [53.0, 101.0], [52.0, 99.0], [55.0, 100.0], [54.0, 184.5], [57.0, 102.0], [59.0, 112.0], [58.0, 102.66666666666667], [61.0, 99.0], [60.0, 110.33333333333333], [63.0, 150.5], [62.0, 106.0], [64.0, 167.8], [65.0, 100.5], [67.0, 111.0], [66.0, 111.5], [68.0, 184.0], [69.0, 173.42857142857142], [70.0, 166.1818181818182], [71.0, 145.14285714285714], [72.0, 144.29999999999998], [74.0, 132.0], [75.0, 116.0], [73.0, 95.0], [76.0, 109.8], [77.0, 191.875], [78.0, 119.28571428571428], [79.0, 60.4], [80.0, 111.0], [81.0, 90.0], [82.0, 102.33333333333333], [83.0, 329.3333333333333], [84.0, 125.33333333333333], [85.0, 151.0], [86.0, 107.75], [87.0, 129.5], [88.0, 103.88888888888889], [90.0, 139.55555555555554], [91.0, 171.66666666666666], [89.0, 278.0], [92.0, 112.0], [93.0, 193.22222222222223], [94.0, 265.8333333333333], [95.0, 288.75], [96.0, 227.33333333333331], [97.0, 346.58333333333337], [98.0, 108.22222222222223], [99.0, 707.0], [100.0, 377.125], [101.0, 153.0], [102.0, 150.0], [103.0, 187.66666666666666], [104.0, 128.375], [105.0, 167.66666666666666], [107.0, 208.8], [106.0, 198.0], [108.0, 169.63636363636363], [109.0, 116.25], [110.0, 109.83333333333333], [111.0, 146.2], [112.0, 347.2], [114.0, 120.0], [115.0, 135.75], [113.0, 266.75], [116.0, 176.33333333333334], [117.0, 122.71428571428571], [118.0, 165.79999999999998], [119.0, 146.64285714285714], [120.0, 175.53846153846152], [121.0, 155.5], [122.0, 138.3076923076923], [123.0, 126.75], [124.0, 131.88888888888889], [125.0, 123.23809523809523], [126.0, 140.28947368421058], [127.0, 129.3], [128.0, 145.70909090909092], [129.0, 133.88372093023256], [130.0, 137.62162162162156], [131.0, 129.07407407407408], [132.0, 108.49180327868851], [133.0, 141.77272727272728], [134.0, 132.89583333333334], [135.0, 117.7], [136.0, 151.77272727272725], [137.0, 116.70833333333334], [138.0, 166.4], [139.0, 179.50000000000003], [141.0, 165.7948717948718], [142.0, 172.65384615384613], [140.0, 174.25], [143.0, 140.08333333333334], [144.0, 198.25641025641025], [145.0, 150.65517241379305], [146.0, 131.81250000000003], [147.0, 186.8181818181818], [148.0, 206.79999999999998], [149.0, 159.81818181818184], [150.0, 308.8], [151.0, 215.47058823529412], [153.0, 317.7619047619048], [154.0, 102.5], [156.0, 196.55172413793107], [155.0, 175.82608695652172], [157.0, 172.51724137931035], [158.0, 240.04000000000002], [159.0, 158.125], [152.0, 809.3333333333334], [160.0, 336.63157894736844], [161.0, 218.16666666666669], [162.0, 177.6], [164.0, 177.5], [163.0, 127.0], [165.0, 262.0952380952381], [166.0, 180.551724137931], [167.0, 187.94339622641508], [168.0, 182.1851851851852], [169.0, 189.23404255319147], [170.0, 161.45161290322577], [171.0, 240.87499999999997], [172.0, 280.84374999999994], [173.0, 196.12499999999997], [174.0, 217.52272727272728], [175.0, 228.95081967213113], [176.0, 217.5454545454545], [177.0, 268.6190476190476], [178.0, 215.6969696969697], [179.0, 208.5087719298246], [180.0, 181.22448979591837], [181.0, 347.595238095238], [182.0, 171.32000000000002], [183.0, 231.7777777777778], [184.0, 117.13333333333335], [185.0, 157.04255319148936], [186.0, 199.6590909090909], [187.0, 215.00000000000006], [188.0, 168.65277777777777], [189.0, 210.01351351351354], [190.0, 202.73999999999998], [191.0, 222.73076923076923], [192.0, 234.8139534883721], [193.0, 260.2682926829268], [195.0, 226.39393939393938], [194.0, 253.55999999999995], [196.0, 243.16], [197.0, 457.8235294117647], [198.0, 195.57142857142858], [199.0, 300.0869565217392], [200.0, 267.3846153846154], [201.0, 237.09999999999997], [202.0, 188.35294117647055], [203.0, 185.50000000000003], [204.0, 149.87499999999994], [205.0, 179.30769230769226], [206.0, 167.99999999999997], [207.0, 189.72], [208.0, 209.75999999999996], [209.0, 220.92307692307696], [210.0, 182.57142857142858], [211.0, 159.35714285714286], [212.0, 187.6521739130435], [213.0, 236.66666666666666], [214.0, 165.15384615384613], [215.0, 112.55555555555554], [216.0, 156.33333333333331], [217.0, 150.60606060606057], [218.0, 299.6363636363636], [221.0, 294.8571428571428], [222.0, 269.10526315789474], [220.0, 84.875], [219.0, 347.14285714285717], [223.0, 173.99999999999997], [224.0, 236.40740740740736], [225.0, 278.2173913043479], [226.0, 245.8064516129033], [227.0, 363.86956521739125], [228.0, 277.4], [229.0, 249.39999999999998], [230.0, 187.0], [231.0, 162.9090909090909], [232.0, 335.83333333333337], [233.0, 193.625], [234.0, 316.1481481481481], [235.0, 236.16], [236.0, 240.52173913043484], [237.0, 192.46875000000006], [238.0, 200.94117647058823], [239.0, 210.96774193548384], [240.0, 238.0], [241.0, 165.452380952381], [242.0, 223.72727272727275], [243.0, 257.3857142857143], [244.0, 198.73076923076925], [245.0, 221.31081081081086], [246.0, 303.175], [247.0, 329.11999999999995], [248.0, 261.5806451612903], [249.0, 283.69565217391295], [250.0, 271.84615384615387], [251.0, 353.11764705882354], [252.0, 264.28571428571433], [253.0, 239.9047619047619], [254.0, 246.99999999999994], [255.0, 357.8999999999999], [257.0, 250.69879518072284], [256.0, 228.16666666666669], [258.0, 358.10526315789474], [259.0, 263.1851851851852], [260.0, 259.0], [261.0, 372.1428571428571], [262.0, 208.16666666666666], [263.0, 285.8888888888889], [264.0, 353.5333333333333], [270.0, 340.10256410256414], [271.0, 129.75], [268.0, 236.23529411764707], [269.0, 367.0333333333333], [265.0, 278.0], [266.0, 318.2], [267.0, 413.00000000000006], [272.0, 246.33333333333331], [273.0, 164.33333333333334], [274.0, 207.33333333333334], [284.0, 137.0], [275.0, 129.66666666666666], [286.0, 475.55555555555554], [287.0, 269.04999999999995], [285.0, 269.16666666666663], [276.0, 281.5714285714286], [277.0, 246.83333333333337], [278.0, 366.0909090909091], [279.0, 628.8333333333333], [280.0, 334.8], [281.0, 262.8181818181818], [282.0, 320.09090909090907], [283.0, 509.5], [289.0, 357.0980392156863], [288.0, 299.11764705882354], [290.0, 411.83333333333326], [291.0, 330.0857142857143], [292.0, 280.34000000000003], [293.0, 340.35], [294.0, 283.36956521739125], [295.0, 336.04761904761904], [296.0, 211.0], [302.0, 170.42857142857142], [303.0, 394.3636363636364], [300.0, 322.84615384615375], [301.0, 261.27272727272725], [297.0, 367.0], [299.0, 262.1052631578948], [298.0, 339.75], [305.0, 269.79999999999995], [304.0, 434.11111111111114], [307.0, 256.21212121212113], [306.0, 534.1176470588236], [308.0, 333.54545454545456], [309.0, 420.76271186440687], [310.0, 357.80701754385973], [311.0, 375.99999999999994], [312.0, 404.2857142857143], [318.0, 548.0833333333334], [319.0, 343.2666666666667], [316.0, 294.00000000000006], [317.0, 329.3448275862069], [313.0, 387.3421052631579], [314.0, 316.15151515151507], [315.0, 446.2222222222223], [321.0, 352.575], [320.0, 367.65517241379314], [322.0, 351.7692307692308], [323.0, 412.63492063492066], [324.0, 305.3777777777778], [325.0, 358.61111111111114], [326.0, 362.6865671641791], [327.0, 303.63461538461553], [328.0, 379.9428571428572], [334.0, 290.58260869565214], [335.0, 346.9784946236557], [332.0, 338.0344827586207], [333.0, 366.9818181818182], [329.0, 314.95180722891564], [330.0, 332.3974358974359], [331.0, 329.8080000000001], [337.0, 332.12], [336.0, 339.32000000000005], [338.0, 248.25581395348834], [339.0, 565.25], [341.0, 465.625], [340.0, 796.0], [342.0, 439.75], [343.0, 461.33333333333337], [344.0, 410.9], [351.0, 416.9655172413793], [350.0, 446.951219512195], [348.0, 463.4814814814815], [349.0, 453.73076923076917], [345.0, 363.1000000000001], [346.0, 396.32142857142856], [347.0, 440.42307692307696], [353.0, 366.3666666666668], [352.0, 392.65384615384625], [354.0, 440.05000000000007], [355.0, 298.0192307692308], [357.0, 344.22222222222223], [358.0, 454.3666666666665], [356.0, 496.05660377358504], [359.0, 350.46753246753246], [360.0, 315.7684210526316], [366.0, 370.5202702702704], [367.0, 411.57668711656424], [364.0, 331.2920353982299], [365.0, 406.3076923076922], [361.0, 422.7415730337079], [362.0, 370.3310810810809], [363.0, 397.40277777777794], [369.0, 340.9824561403508], [368.0, 390.99090909090916], [370.0, 526.0], [371.0, 418.6428571428571], [372.0, 396.6], [373.0, 335.8214285714285], [374.0, 326.29411764705884], [376.0, 425.2295081967214], [382.0, 508.68421052631584], [383.0, 342.55172413793105], [380.0, 314.5777777777778], [381.0, 481.871794871795], [378.0, 419.9387755102041], [379.0, 392.18181818181813], [377.0, 339.30000000000007], [375.0, 315.111111111111], [387.0, 457.41666666666663], [385.0, 414.8461538461538], [384.0, 351.6], [386.0, 358.95833333333337], [390.0, 351.75], [389.0, 409.0], [388.0, 411.75], [392.0, 405.9459459459458], [396.0, 463.45238095238096], [397.0, 300.6], [391.0, 472.0], [393.0, 412.9565217391303], [394.0, 462.1351351351352], [395.0, 335.79069767441865], [1.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[265.5004999999998, 288.9273000000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 397.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5155.0, "minX": 1.729007551E12, "maxY": 449038.0, "series": [{"data": [[1.729007558E12, 437410.0], [1.729007559E12, 440126.0], [1.72900756E12, 440224.0], [1.729007561E12, 449038.0], [1.729007551E12, 7491.0], [1.729007562E12, 405112.0], [1.729007552E12, 415853.0], [1.729007553E12, 412629.0], [1.729007554E12, 425188.0], [1.729007555E12, 432583.0], [1.729007556E12, 398046.0], [1.729007557E12, 424208.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.729007558E12, 301192.0], [1.729007559E12, 303032.0], [1.72900756E12, 303130.0], [1.729007561E12, 309170.0], [1.729007551E12, 5155.0], [1.729007562E12, 278968.0], [1.729007552E12, 286351.0], [1.729007553E12, 284149.0], [1.729007554E12, 292766.0], [1.729007555E12, 297825.0], [1.729007556E12, 274092.0], [1.729007557E12, 292078.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729007562E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 126.22547914317931, "minX": 1.729007551E12, "maxY": 408.79958246346575, "series": [{"data": [[1.729007558E12, 327.32583065380476], [1.729007559E12, 378.6954206602769], [1.72900756E12, 387.1661341853028], [1.729007561E12, 408.79958246346575], [1.729007551E12, 190.625], [1.729007562E12, 308.3171296296299], [1.729007552E12, 126.22547914317931], [1.729007553E12, 176.69545454545468], [1.729007554E12, 191.25578831312006], [1.729007555E12, 213.24918743228596], [1.729007556E12, 290.7585394581861], [1.729007557E12, 352.5546961325969]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729007562E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 125.92671927846665, "minX": 1.729007551E12, "maxY": 408.6826722338204, "series": [{"data": [[1.729007558E12, 327.26045016077154], [1.729007559E12, 378.5761448349306], [1.72900756E12, 387.06176783812555], [1.729007561E12, 408.6826722338204], [1.729007551E12, 185.25], [1.729007562E12, 308.222222222222], [1.729007552E12, 125.92671927846665], [1.729007553E12, 176.61590909090933], [1.729007554E12, 191.20286659316406], [1.729007555E12, 213.17551462621927], [1.729007556E12, 290.61955241460555], [1.729007557E12, 352.4541436464083]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729007562E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.017361111111111112, "minX": 1.729007551E12, "maxY": 34.125, "series": [{"data": [[1.729007558E12, 0.08788853161843514], [1.729007559E12, 0.13312034078807228], [1.72900756E12, 0.0979765708200213], [1.729007561E12, 0.12004175365344469], [1.729007551E12, 34.125], [1.729007562E12, 0.017361111111111112], [1.729007552E12, 1.24802705749718], [1.729007553E12, 0.25568181818181834], [1.729007554E12, 0.12568908489525907], [1.729007555E12, 0.12567713976164685], [1.729007556E12, 0.11425206124852763], [1.729007557E12, 0.0828729281767956]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729007562E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.729007551E12, "maxY": 2819.0, "series": [{"data": [[1.729007558E12, 1759.0], [1.729007559E12, 2006.0], [1.72900756E12, 2615.0], [1.729007561E12, 2819.0], [1.729007551E12, 201.0], [1.729007562E12, 2413.0], [1.729007552E12, 484.0], [1.729007553E12, 608.0], [1.729007554E12, 995.0], [1.729007555E12, 1450.0], [1.729007556E12, 2563.0], [1.729007557E12, 1823.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.729007558E12, 750.0], [1.729007559E12, 773.0], [1.72900756E12, 787.0], [1.729007561E12, 795.0], [1.729007551E12, 200.3], [1.729007562E12, 781.0], [1.729007552E12, 225.80000000000018], [1.729007553E12, 319.79999999999995], [1.729007554E12, 392.0], [1.729007555E12, 456.0], [1.729007556E12, 704.0], [1.729007557E12, 758.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.729007558E12, 1361.6399999999999], [1.729007559E12, 1400.6], [1.72900756E12, 1600.6], [1.729007561E12, 1607.0499999999997], [1.729007551E12, 201.0], [1.729007562E12, 1208.4], [1.729007552E12, 361.08000000000004], [1.729007553E12, 506.5699999999998], [1.729007554E12, 614.7599999999999], [1.729007555E12, 853.0], [1.729007556E12, 1438.5], [1.729007557E12, 1588.6999999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.729007558E12, 766.0], [1.729007559E12, 980.0], [1.72900756E12, 1007.0], [1.729007561E12, 997.0], [1.729007551E12, 201.0], [1.729007562E12, 966.75], [1.729007552E12, 272.5999999999999], [1.729007553E12, 347.0], [1.729007554E12, 407.5999999999999], [1.729007555E12, 650.0], [1.729007556E12, 890.0], [1.729007557E12, 978.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.729007558E12, 7.0], [1.729007559E12, 9.0], [1.72900756E12, 18.0], [1.729007561E12, 159.0], [1.729007551E12, 161.0], [1.729007562E12, 6.0], [1.729007552E12, 6.0], [1.729007553E12, 5.0], [1.729007554E12, 5.0], [1.729007555E12, 12.0], [1.729007556E12, 40.0], [1.729007557E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.729007558E12, 163.0], [1.729007559E12, 359.0], [1.72900756E12, 200.0], [1.729007561E12, 224.0], [1.729007551E12, 194.5], [1.729007562E12, 202.0], [1.729007552E12, 131.0], [1.729007553E12, 175.0], [1.729007554E12, 197.0], [1.729007555E12, 211.0], [1.729007556E12, 118.0], [1.729007557E12, 319.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729007562E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 118.0, "minX": 16.0, "maxY": 319.0, "series": [{"data": [[16.0, 194.5], [849.0, 118.0], [887.0, 131.0], [880.0, 175.0], [864.0, 202.0], [907.0, 197.0], [923.0, 211.0], [905.0, 319.0], [933.0, 163.0], [939.0, 201.0], [958.0, 224.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 958.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 118.0, "minX": 16.0, "maxY": 319.0, "series": [{"data": [[16.0, 187.0], [849.0, 118.0], [887.0, 131.0], [880.0, 175.0], [864.0, 202.0], [907.0, 197.0], [923.0, 211.0], [905.0, 319.0], [933.0, 162.0], [939.0, 201.0], [958.0, 223.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 958.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 80.0, "minX": 1.729007551E12, "maxY": 969.0, "series": [{"data": [[1.729007558E12, 942.0], [1.729007559E12, 969.0], [1.72900756E12, 949.0], [1.729007561E12, 906.0], [1.729007551E12, 80.0], [1.729007562E12, 541.0], [1.729007552E12, 966.0], [1.729007553E12, 918.0], [1.729007554E12, 936.0], [1.729007555E12, 956.0], [1.729007556E12, 895.0], [1.729007557E12, 942.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729007562E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.729007551E12, "maxY": 958.0, "series": [{"data": [[1.729007558E12, 933.0], [1.729007559E12, 939.0], [1.72900756E12, 939.0], [1.729007561E12, 958.0], [1.729007551E12, 16.0], [1.729007562E12, 864.0], [1.729007552E12, 887.0], [1.729007553E12, 880.0], [1.729007554E12, 907.0], [1.729007555E12, 923.0], [1.729007556E12, 849.0], [1.729007557E12, 905.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729007562E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.729007551E12, "maxY": 958.0, "series": [{"data": [[1.729007558E12, 933.0], [1.729007559E12, 939.0], [1.72900756E12, 939.0], [1.729007561E12, 958.0], [1.729007551E12, 16.0], [1.729007562E12, 864.0], [1.729007552E12, 887.0], [1.729007553E12, 880.0], [1.729007554E12, 907.0], [1.729007555E12, 923.0], [1.729007556E12, 849.0], [1.729007557E12, 905.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729007562E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.729007551E12, "maxY": 958.0, "series": [{"data": [[1.729007558E12, 933.0], [1.729007559E12, 939.0], [1.72900756E12, 939.0], [1.729007561E12, 958.0], [1.729007551E12, 16.0], [1.729007562E12, 864.0], [1.729007552E12, 887.0], [1.729007553E12, 880.0], [1.729007554E12, 907.0], [1.729007555E12, 923.0], [1.729007556E12, 849.0], [1.729007557E12, 905.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729007562E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

