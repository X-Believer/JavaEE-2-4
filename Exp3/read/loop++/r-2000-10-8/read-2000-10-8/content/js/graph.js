/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 919.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 9.0], [12.4, 9.0], [12.5, 9.0], [12.6, 9.0], [12.7, 9.0], [12.8, 9.0], [12.9, 9.0], [13.0, 9.0], [13.1, 10.0], [13.2, 10.0], [13.3, 10.0], [13.4, 10.0], [13.5, 10.0], [13.6, 10.0], [13.7, 10.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 12.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 12.0], [14.9, 12.0], [15.0, 12.0], [15.1, 13.0], [15.2, 13.0], [15.3, 13.0], [15.4, 13.0], [15.5, 13.0], [15.6, 13.0], [15.7, 14.0], [15.8, 14.0], [15.9, 14.0], [16.0, 14.0], [16.1, 14.0], [16.2, 14.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 17.0], [17.5, 17.0], [17.6, 17.0], [17.7, 17.0], [17.8, 17.0], [17.9, 17.0], [18.0, 18.0], [18.1, 18.0], [18.2, 18.0], [18.3, 18.0], [18.4, 18.0], [18.5, 18.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 19.0], [19.0, 20.0], [19.1, 20.0], [19.2, 20.0], [19.3, 20.0], [19.4, 21.0], [19.5, 21.0], [19.6, 21.0], [19.7, 21.0], [19.8, 21.0], [19.9, 22.0], [20.0, 22.0], [20.1, 22.0], [20.2, 22.0], [20.3, 23.0], [20.4, 23.0], [20.5, 23.0], [20.6, 23.0], [20.7, 24.0], [20.8, 24.0], [20.9, 24.0], [21.0, 24.0], [21.1, 24.0], [21.2, 25.0], [21.3, 25.0], [21.4, 25.0], [21.5, 26.0], [21.6, 26.0], [21.7, 26.0], [21.8, 26.0], [21.9, 26.0], [22.0, 27.0], [22.1, 27.0], [22.2, 27.0], [22.3, 27.0], [22.4, 27.0], [22.5, 28.0], [22.6, 28.0], [22.7, 28.0], [22.8, 28.0], [22.9, 28.0], [23.0, 28.0], [23.1, 29.0], [23.2, 29.0], [23.3, 29.0], [23.4, 29.0], [23.5, 29.0], [23.6, 29.0], [23.7, 30.0], [23.8, 30.0], [23.9, 30.0], [24.0, 30.0], [24.1, 30.0], [24.2, 31.0], [24.3, 31.0], [24.4, 31.0], [24.5, 31.0], [24.6, 31.0], [24.7, 32.0], [24.8, 32.0], [24.9, 32.0], [25.0, 32.0], [25.1, 32.0], [25.2, 33.0], [25.3, 33.0], [25.4, 33.0], [25.5, 33.0], [25.6, 33.0], [25.7, 33.0], [25.8, 33.0], [25.9, 34.0], [26.0, 34.0], [26.1, 34.0], [26.2, 34.0], [26.3, 34.0], [26.4, 34.0], [26.5, 35.0], [26.6, 35.0], [26.7, 35.0], [26.8, 35.0], [26.9, 35.0], [27.0, 35.0], [27.1, 36.0], [27.2, 36.0], [27.3, 36.0], [27.4, 36.0], [27.5, 36.0], [27.6, 37.0], [27.7, 37.0], [27.8, 37.0], [27.9, 37.0], [28.0, 37.0], [28.1, 37.0], [28.2, 37.0], [28.3, 38.0], [28.4, 38.0], [28.5, 38.0], [28.6, 38.0], [28.7, 38.0], [28.8, 39.0], [28.9, 39.0], [29.0, 39.0], [29.1, 39.0], [29.2, 39.0], [29.3, 39.0], [29.4, 40.0], [29.5, 40.0], [29.6, 40.0], [29.7, 40.0], [29.8, 40.0], [29.9, 40.0], [30.0, 41.0], [30.1, 41.0], [30.2, 41.0], [30.3, 41.0], [30.4, 41.0], [30.5, 41.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 43.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 43.0], [31.7, 43.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 45.0], [32.4, 45.0], [32.5, 45.0], [32.6, 45.0], [32.7, 45.0], [32.8, 46.0], [32.9, 46.0], [33.0, 46.0], [33.1, 46.0], [33.2, 46.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 48.0], [33.9, 48.0], [34.0, 48.0], [34.1, 48.0], [34.2, 49.0], [34.3, 49.0], [34.4, 49.0], [34.5, 49.0], [34.6, 50.0], [34.7, 50.0], [34.8, 50.0], [34.9, 50.0], [35.0, 51.0], [35.1, 51.0], [35.2, 51.0], [35.3, 52.0], [35.4, 52.0], [35.5, 52.0], [35.6, 52.0], [35.7, 53.0], [35.8, 53.0], [35.9, 53.0], [36.0, 53.0], [36.1, 54.0], [36.2, 54.0], [36.3, 55.0], [36.4, 55.0], [36.5, 56.0], [36.6, 56.0], [36.7, 56.0], [36.8, 57.0], [36.9, 57.0], [37.0, 58.0], [37.1, 58.0], [37.2, 59.0], [37.3, 59.0], [37.4, 60.0], [37.5, 61.0], [37.6, 61.0], [37.7, 61.0], [37.8, 62.0], [37.9, 63.0], [38.0, 64.0], [38.1, 64.0], [38.2, 65.0], [38.3, 66.0], [38.4, 66.0], [38.5, 67.0], [38.6, 68.0], [38.7, 68.0], [38.8, 69.0], [38.9, 70.0], [39.0, 70.0], [39.1, 71.0], [39.2, 71.0], [39.3, 72.0], [39.4, 72.0], [39.5, 73.0], [39.6, 73.0], [39.7, 74.0], [39.8, 74.0], [39.9, 75.0], [40.0, 76.0], [40.1, 76.0], [40.2, 77.0], [40.3, 77.0], [40.4, 78.0], [40.5, 78.0], [40.6, 79.0], [40.7, 79.0], [40.8, 80.0], [40.9, 81.0], [41.0, 81.0], [41.1, 81.0], [41.2, 82.0], [41.3, 82.0], [41.4, 83.0], [41.5, 83.0], [41.6, 84.0], [41.7, 85.0], [41.8, 85.0], [41.9, 85.0], [42.0, 86.0], [42.1, 86.0], [42.2, 87.0], [42.3, 87.0], [42.4, 88.0], [42.5, 88.0], [42.6, 89.0], [42.7, 89.0], [42.8, 90.0], [42.9, 90.0], [43.0, 91.0], [43.1, 92.0], [43.2, 92.0], [43.3, 92.0], [43.4, 93.0], [43.5, 93.0], [43.6, 93.0], [43.7, 94.0], [43.8, 94.0], [43.9, 95.0], [44.0, 95.0], [44.1, 95.0], [44.2, 96.0], [44.3, 96.0], [44.4, 97.0], [44.5, 97.0], [44.6, 97.0], [44.7, 98.0], [44.8, 98.0], [44.9, 98.0], [45.0, 99.0], [45.1, 99.0], [45.2, 99.0], [45.3, 99.0], [45.4, 100.0], [45.5, 100.0], [45.6, 101.0], [45.7, 101.0], [45.8, 101.0], [45.9, 101.0], [46.0, 102.0], [46.1, 102.0], [46.2, 102.0], [46.3, 103.0], [46.4, 103.0], [46.5, 104.0], [46.6, 104.0], [46.7, 104.0], [46.8, 104.0], [46.9, 105.0], [47.0, 105.0], [47.1, 105.0], [47.2, 105.0], [47.3, 106.0], [47.4, 106.0], [47.5, 106.0], [47.6, 106.0], [47.7, 107.0], [47.8, 107.0], [47.9, 107.0], [48.0, 108.0], [48.1, 108.0], [48.2, 108.0], [48.3, 108.0], [48.4, 109.0], [48.5, 109.0], [48.6, 109.0], [48.7, 109.0], [48.8, 110.0], [48.9, 110.0], [49.0, 110.0], [49.1, 111.0], [49.2, 111.0], [49.3, 111.0], [49.4, 111.0], [49.5, 112.0], [49.6, 112.0], [49.7, 112.0], [49.8, 113.0], [49.9, 113.0], [50.0, 113.0], [50.1, 113.0], [50.2, 114.0], [50.3, 114.0], [50.4, 114.0], [50.5, 114.0], [50.6, 115.0], [50.7, 115.0], [50.8, 115.0], [50.9, 115.0], [51.0, 116.0], [51.1, 116.0], [51.2, 116.0], [51.3, 116.0], [51.4, 117.0], [51.5, 117.0], [51.6, 117.0], [51.7, 117.0], [51.8, 117.0], [51.9, 118.0], [52.0, 118.0], [52.1, 118.0], [52.2, 118.0], [52.3, 118.0], [52.4, 119.0], [52.5, 119.0], [52.6, 119.0], [52.7, 119.0], [52.8, 120.0], [52.9, 120.0], [53.0, 120.0], [53.1, 120.0], [53.2, 120.0], [53.3, 120.0], [53.4, 121.0], [53.5, 121.0], [53.6, 121.0], [53.7, 121.0], [53.8, 121.0], [53.9, 121.0], [54.0, 122.0], [54.1, 122.0], [54.2, 122.0], [54.3, 122.0], [54.4, 123.0], [54.5, 123.0], [54.6, 123.0], [54.7, 123.0], [54.8, 123.0], [54.9, 123.0], [55.0, 123.0], [55.1, 123.0], [55.2, 124.0], [55.3, 124.0], [55.4, 124.0], [55.5, 124.0], [55.6, 124.0], [55.7, 124.0], [55.8, 125.0], [55.9, 125.0], [56.0, 125.0], [56.1, 125.0], [56.2, 125.0], [56.3, 125.0], [56.4, 126.0], [56.5, 126.0], [56.6, 126.0], [56.7, 126.0], [56.8, 126.0], [56.9, 126.0], [57.0, 126.0], [57.1, 127.0], [57.2, 127.0], [57.3, 127.0], [57.4, 127.0], [57.5, 127.0], [57.6, 127.0], [57.7, 127.0], [57.8, 128.0], [57.9, 128.0], [58.0, 128.0], [58.1, 128.0], [58.2, 128.0], [58.3, 128.0], [58.4, 129.0], [58.5, 129.0], [58.6, 129.0], [58.7, 129.0], [58.8, 129.0], [58.9, 129.0], [59.0, 130.0], [59.1, 130.0], [59.2, 130.0], [59.3, 130.0], [59.4, 130.0], [59.5, 130.0], [59.6, 131.0], [59.7, 131.0], [59.8, 131.0], [59.9, 131.0], [60.0, 131.0], [60.1, 132.0], [60.2, 132.0], [60.3, 132.0], [60.4, 132.0], [60.5, 132.0], [60.6, 132.0], [60.7, 132.0], [60.8, 133.0], [60.9, 133.0], [61.0, 133.0], [61.1, 133.0], [61.2, 133.0], [61.3, 134.0], [61.4, 134.0], [61.5, 134.0], [61.6, 134.0], [61.7, 134.0], [61.8, 135.0], [61.9, 135.0], [62.0, 135.0], [62.1, 135.0], [62.2, 135.0], [62.3, 136.0], [62.4, 136.0], [62.5, 136.0], [62.6, 136.0], [62.7, 136.0], [62.8, 136.0], [62.9, 137.0], [63.0, 137.0], [63.1, 137.0], [63.2, 137.0], [63.3, 137.0], [63.4, 138.0], [63.5, 138.0], [63.6, 138.0], [63.7, 138.0], [63.8, 138.0], [63.9, 138.0], [64.0, 139.0], [64.1, 139.0], [64.2, 139.0], [64.3, 139.0], [64.4, 139.0], [64.5, 139.0], [64.6, 140.0], [64.7, 140.0], [64.8, 140.0], [64.9, 140.0], [65.0, 140.0], [65.1, 141.0], [65.2, 141.0], [65.3, 141.0], [65.4, 141.0], [65.5, 141.0], [65.6, 141.0], [65.7, 141.0], [65.8, 142.0], [65.9, 142.0], [66.0, 142.0], [66.1, 142.0], [66.2, 142.0], [66.3, 142.0], [66.4, 143.0], [66.5, 143.0], [66.6, 143.0], [66.7, 143.0], [66.8, 143.0], [66.9, 143.0], [67.0, 143.0], [67.1, 144.0], [67.2, 144.0], [67.3, 144.0], [67.4, 144.0], [67.5, 144.0], [67.6, 144.0], [67.7, 145.0], [67.8, 145.0], [67.9, 145.0], [68.0, 145.0], [68.1, 145.0], [68.2, 145.0], [68.3, 146.0], [68.4, 146.0], [68.5, 146.0], [68.6, 146.0], [68.7, 146.0], [68.8, 146.0], [68.9, 146.0], [69.0, 146.0], [69.1, 147.0], [69.2, 147.0], [69.3, 147.0], [69.4, 147.0], [69.5, 147.0], [69.6, 147.0], [69.7, 148.0], [69.8, 148.0], [69.9, 148.0], [70.0, 148.0], [70.1, 148.0], [70.2, 148.0], [70.3, 148.0], [70.4, 149.0], [70.5, 149.0], [70.6, 149.0], [70.7, 149.0], [70.8, 149.0], [70.9, 149.0], [71.0, 150.0], [71.1, 150.0], [71.2, 150.0], [71.3, 150.0], [71.4, 150.0], [71.5, 150.0], [71.6, 151.0], [71.7, 151.0], [71.8, 151.0], [71.9, 151.0], [72.0, 151.0], [72.1, 151.0], [72.2, 152.0], [72.3, 152.0], [72.4, 152.0], [72.5, 152.0], [72.6, 152.0], [72.7, 153.0], [72.8, 153.0], [72.9, 153.0], [73.0, 153.0], [73.1, 153.0], [73.2, 154.0], [73.3, 154.0], [73.4, 154.0], [73.5, 154.0], [73.6, 154.0], [73.7, 155.0], [73.8, 155.0], [73.9, 155.0], [74.0, 155.0], [74.1, 155.0], [74.2, 156.0], [74.3, 156.0], [74.4, 156.0], [74.5, 156.0], [74.6, 156.0], [74.7, 157.0], [74.8, 157.0], [74.9, 157.0], [75.0, 157.0], [75.1, 158.0], [75.2, 158.0], [75.3, 158.0], [75.4, 158.0], [75.5, 158.0], [75.6, 158.0], [75.7, 158.0], [75.8, 159.0], [75.9, 159.0], [76.0, 159.0], [76.1, 159.0], [76.2, 159.0], [76.3, 160.0], [76.4, 160.0], [76.5, 160.0], [76.6, 160.0], [76.7, 160.0], [76.8, 161.0], [76.9, 161.0], [77.0, 161.0], [77.1, 161.0], [77.2, 161.0], [77.3, 162.0], [77.4, 162.0], [77.5, 162.0], [77.6, 162.0], [77.7, 162.0], [77.8, 163.0], [77.9, 163.0], [78.0, 163.0], [78.1, 163.0], [78.2, 163.0], [78.3, 164.0], [78.4, 164.0], [78.5, 164.0], [78.6, 164.0], [78.7, 164.0], [78.8, 165.0], [78.9, 165.0], [79.0, 165.0], [79.1, 165.0], [79.2, 165.0], [79.3, 166.0], [79.4, 166.0], [79.5, 166.0], [79.6, 166.0], [79.7, 166.0], [79.8, 166.0], [79.9, 167.0], [80.0, 167.0], [80.1, 167.0], [80.2, 168.0], [80.3, 168.0], [80.4, 168.0], [80.5, 168.0], [80.6, 168.0], [80.7, 168.0], [80.8, 169.0], [80.9, 169.0], [81.0, 169.0], [81.1, 169.0], [81.2, 170.0], [81.3, 170.0], [81.4, 170.0], [81.5, 170.0], [81.6, 171.0], [81.7, 171.0], [81.8, 172.0], [81.9, 172.0], [82.0, 172.0], [82.1, 173.0], [82.2, 173.0], [82.3, 173.0], [82.4, 173.0], [82.5, 174.0], [82.6, 174.0], [82.7, 175.0], [82.8, 175.0], [82.9, 175.0], [83.0, 176.0], [83.1, 176.0], [83.2, 176.0], [83.3, 177.0], [83.4, 177.0], [83.5, 178.0], [83.6, 178.0], [83.7, 178.0], [83.8, 179.0], [83.9, 179.0], [84.0, 180.0], [84.1, 180.0], [84.2, 181.0], [84.3, 181.0], [84.4, 182.0], [84.5, 183.0], [84.6, 184.0], [84.7, 184.0], [84.8, 185.0], [84.9, 186.0], [85.0, 186.0], [85.1, 187.0], [85.2, 187.0], [85.3, 189.0], [85.4, 190.0], [85.5, 191.0], [85.6, 192.0], [85.7, 194.0], [85.8, 196.0], [85.9, 198.0], [86.0, 199.0], [86.1, 201.0], [86.2, 203.0], [86.3, 205.0], [86.4, 207.0], [86.5, 209.0], [86.6, 211.0], [86.7, 213.0], [86.8, 215.0], [86.9, 217.0], [87.0, 219.0], [87.1, 220.0], [87.2, 222.0], [87.3, 224.0], [87.4, 224.0], [87.5, 225.0], [87.6, 227.0], [87.7, 227.0], [87.8, 229.0], [87.9, 229.0], [88.0, 230.0], [88.1, 231.0], [88.2, 232.0], [88.3, 233.0], [88.4, 234.0], [88.5, 235.0], [88.6, 236.0], [88.7, 236.0], [88.8, 237.0], [88.9, 238.0], [89.0, 238.0], [89.1, 239.0], [89.2, 240.0], [89.3, 241.0], [89.4, 242.0], [89.5, 242.0], [89.6, 243.0], [89.7, 243.0], [89.8, 244.0], [89.9, 244.0], [90.0, 245.0], [90.1, 245.0], [90.2, 246.0], [90.3, 247.0], [90.4, 248.0], [90.5, 248.0], [90.6, 249.0], [90.7, 250.0], [90.8, 250.0], [90.9, 251.0], [91.0, 252.0], [91.1, 254.0], [91.2, 254.0], [91.3, 255.0], [91.4, 256.0], [91.5, 257.0], [91.6, 257.0], [91.7, 259.0], [91.8, 260.0], [91.9, 261.0], [92.0, 262.0], [92.1, 262.0], [92.2, 263.0], [92.3, 264.0], [92.4, 265.0], [92.5, 266.0], [92.6, 266.0], [92.7, 267.0], [92.8, 267.0], [92.9, 268.0], [93.0, 269.0], [93.1, 270.0], [93.2, 271.0], [93.3, 271.0], [93.4, 272.0], [93.5, 274.0], [93.6, 275.0], [93.7, 276.0], [93.8, 277.0], [93.9, 278.0], [94.0, 279.0], [94.1, 279.0], [94.2, 280.0], [94.3, 281.0], [94.4, 282.0], [94.5, 283.0], [94.6, 284.0], [94.7, 285.0], [94.8, 286.0], [94.9, 287.0], [95.0, 289.0], [95.1, 290.0], [95.2, 291.0], [95.3, 292.0], [95.4, 294.0], [95.5, 296.0], [95.6, 297.0], [95.7, 298.0], [95.8, 300.0], [95.9, 301.0], [96.0, 304.0], [96.1, 307.0], [96.2, 310.0], [96.3, 313.0], [96.4, 317.0], [96.5, 320.0], [96.6, 325.0], [96.7, 332.0], [96.8, 339.0], [96.9, 342.0], [97.0, 347.0], [97.1, 352.0], [97.2, 356.0], [97.3, 359.0], [97.4, 363.0], [97.5, 366.0], [97.6, 370.0], [97.7, 373.0], [97.8, 375.0], [97.9, 378.0], [98.0, 382.0], [98.1, 385.0], [98.2, 387.0], [98.3, 391.0], [98.4, 397.0], [98.5, 402.0], [98.6, 407.0], [98.7, 410.0], [98.8, 419.0], [98.9, 424.0], [99.0, 432.0], [99.1, 451.0], [99.2, 470.0], [99.3, 484.0], [99.4, 495.0], [99.5, 505.0], [99.6, 520.0], [99.7, 549.0], [99.8, 601.0], [99.9, 664.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7257.0, "series": [{"data": [[0.0, 7257.0], [300.0, 433.0], [600.0, 26.0], [700.0, 6.0], [100.0, 6510.0], [200.0, 1553.0], [400.0, 157.0], [900.0, 1.0], [500.0, 57.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 89.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 15911.0, "series": [{"data": [[0.0, 15911.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 89.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.40078328981721, "minX": 1.729307727E12, "maxY": 257.9486521181005, "series": [{"data": [[1.72930773E12, 164.29901960784298], [1.729307729E12, 18.40078328981721], [1.729307733E12, 241.20778267254045], [1.729307731E12, 215.47298919567842], [1.729307732E12, 205.1385093167703], [1.729307735E12, 247.7438867438868], [1.729307736E12, 257.9486521181005], [1.729307734E12, 250.41874619598295], [1.729307727E12, 146.08856088560884], [1.729307728E12, 88.37675350701387], [1.729307737E12, 162.15269196822575]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729307737E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 202.1911764705882, "series": [{"data": [[2.0, 2.454545454545454], [3.0, 2.5078125], [4.0, 2.931623931623932], [5.0, 3.2515723270440238], [6.0, 3.463519313304722], [7.0, 4.110000000000001], [8.0, 4.26315789473684], [9.0, 5.276315789473685], [10.0, 4.17741935483871], [11.0, 6.552238805970151], [12.0, 11.783783783783784], [13.0, 15.933333333333334], [14.0, 9.3], [15.0, 8.464285714285714], [16.0, 9.172413793103443], [17.0, 9.041666666666663], [18.0, 9.775510204081636], [19.0, 11.599999999999998], [20.0, 14.461538461538462], [21.0, 8.357142857142858], [22.0, 15.812499999999996], [23.0, 18.0], [24.0, 11.0], [25.0, 23.384615384615383], [26.0, 14.666666666666666], [27.0, 22.88888888888889], [28.0, 18.5], [29.0, 21.125], [30.0, 14.181818181818182], [31.0, 15.733333333333334], [33.0, 30.714285714285715], [32.0, 19.09090909090909], [35.0, 28.125000000000004], [34.0, 27.333333333333332], [36.0, 25.75], [37.0, 28.25], [38.0, 24.157894736842106], [39.0, 43.083333333333336], [41.0, 51.66666666666667], [40.0, 27.599999999999998], [43.0, 32.5], [42.0, 36.714285714285715], [45.0, 69.33333333333333], [44.0, 24.75], [46.0, 24.857142857142858], [47.0, 19.307692307692307], [49.0, 28.30769230769231], [48.0, 26.586206896551722], [51.0, 25.9], [50.0, 25.307692307692307], [53.0, 33.0], [52.0, 34.0], [55.0, 74.25], [54.0, 29.2], [57.0, 33.0], [56.0, 23.58823529411765], [59.0, 29.09375], [58.0, 16.823529411764707], [60.0, 24.775000000000002], [61.0, 28.34090909090909], [63.0, 40.588235294117645], [62.0, 36.77272727272727], [67.0, 59.47058823529411], [66.0, 50.25000000000001], [64.0, 42.166666666666664], [65.0, 27.5], [71.0, 55.4], [70.0, 52.0], [69.0, 47.38888888888889], [68.0, 62.25], [75.0, 52.0], [74.0, 73.66666666666667], [73.0, 64.375], [72.0, 70.0], [79.0, 55.0], [78.0, 52.54545454545455], [77.0, 46.25], [76.0, 71.75], [83.0, 60.5], [82.0, 61.42857142857143], [81.0, 60.0], [80.0, 58.857142857142854], [87.0, 70.80158730158728], [86.0, 85.38749999999999], [85.0, 54.54411764705883], [84.0, 42.17391304347825], [88.0, 62.61249999999998], [89.0, 48.50000000000001], [91.0, 88.0], [90.0, 75.36363636363636], [95.0, 53.5], [93.0, 73.16666666666667], [94.0, 56.285714285714285], [92.0, 79.5], [98.0, 98.57142857142857], [99.0, 86.41666666666666], [97.0, 87.66666666666666], [96.0, 57.666666666666664], [100.0, 53.0], [102.0, 52.942857142857136], [103.0, 51.18181818181818], [101.0, 63.28571428571428], [104.0, 34.375], [105.0, 53.26315789473684], [107.0, 65.3157894736842], [106.0, 58.5], [108.0, 69.00000000000001], [109.0, 50.25], [110.0, 65.56249999999999], [111.0, 40.333333333333336], [112.0, 77.17647058823528], [113.0, 60.21739130434783], [115.0, 36.142857142857146], [114.0, 57.36842105263158], [116.0, 44.0], [117.0, 43.75], [118.0, 69.27272727272727], [119.0, 77.88235294117648], [120.0, 55.04], [121.0, 84.78], [123.0, 102.99999999999999], [122.0, 79.90476190476191], [124.0, 103.0], [125.0, 94.87499999999999], [126.0, 82.65517241379311], [127.0, 112.6875], [128.0, 80.4230769230769], [129.0, 80.10000000000001], [130.0, 98.14999999999999], [131.0, 77.48275862068967], [132.0, 82.61538461538461], [133.0, 76.38888888888887], [134.0, 74.96551724137929], [135.0, 86.41666666666667], [138.0, 79.0952380952381], [139.0, 101.22222222222223], [141.0, 169.1], [142.0, 65.24], [143.0, 84.86363636363637], [140.0, 96.5], [137.0, 79.22222222222223], [136.0, 61.7741935483871], [144.0, 48.30769230769231], [145.0, 60.05882352941177], [146.0, 72.33333333333333], [147.0, 102.79166666666667], [148.0, 101.44444444444444], [149.0, 84.2857142857143], [150.0, 135.09090909090907], [151.0, 108.4722222222222], [152.0, 101.46153846153847], [153.0, 78.43478260869566], [154.0, 80.72727272727272], [155.0, 89.18181818181819], [156.0, 88.5], [157.0, 82.94444444444444], [158.0, 104.44444444444444], [159.0, 98.54166666666666], [165.0, 88.06451612903228], [166.0, 90.66666666666667], [167.0, 76.26470588235294], [164.0, 65.76], [163.0, 85.93939393939394], [162.0, 94.03448275862068], [161.0, 103.9074074074074], [160.0, 95.47058823529412], [168.0, 99.25000000000003], [169.0, 85.72222222222223], [170.0, 72.72727272727272], [171.0, 55.89473684210525], [172.0, 64.56666666666666], [175.0, 101.1153846153846], [174.0, 116.8], [173.0, 99.58333333333334], [176.0, 99.79999999999998], [178.0, 100.27777777777777], [179.0, 105.5294117647059], [180.0, 106.15151515151517], [182.0, 83.10344827586208], [183.0, 96.27272727272725], [181.0, 130.2448979591837], [177.0, 119.96000000000002], [184.0, 70.96428571428571], [185.0, 113.23999999999998], [186.0, 76.63636363636363], [187.0, 152.27999999999997], [188.0, 188.00000000000006], [189.0, 92.37777777777775], [190.0, 59.660377358490564], [191.0, 94.31578947368422], [192.0, 84.23140495867766], [193.0, 91.61538461538461], [195.0, 111.85507246376812], [196.0, 109.21093749999997], [194.0, 129.25714285714287], [197.0, 131.3357142857143], [198.0, 125.51470588235294], [199.0, 118.36082474226805], [200.0, 123.09917355371904], [201.0, 132.6279069767442], [202.0, 142.8548387096774], [203.0, 117.8608695652174], [204.0, 135.30416666666667], [205.0, 126.81589958158993], [206.0, 119.6412213740458], [207.0, 117.91416309012874], [208.0, 116.32275132275134], [209.0, 115.64137931034482], [210.0, 106.51388888888889], [211.0, 118.71568627450982], [212.0, 152.07947019867547], [213.0, 131.27528089887642], [214.0, 125.84722222222224], [215.0, 120.08602150537635], [216.0, 139.0091743119266], [217.0, 113.02173913043478], [218.0, 138.88095238095235], [219.0, 102.45098039215688], [220.0, 134.60377358490567], [222.0, 119.31325301204815], [223.0, 140.816], [221.0, 138.92424242424244], [224.0, 123.69142857142857], [225.0, 159.82727272727274], [226.0, 175.74489795918367], [227.0, 160.46728971962614], [228.0, 161.8849557522124], [229.0, 147.74025974025977], [230.0, 153.75806451612908], [231.0, 156.9777777777778], [232.0, 185.01851851851853], [233.0, 176.75925925925927], [234.0, 119.35483870967741], [235.0, 166.88461538461536], [236.0, 151.72093023255812], [237.0, 158.0555555555556], [238.0, 138.72151898734177], [239.0, 147.31210191082798], [240.0, 153.86538461538464], [241.0, 162.22085889570553], [242.0, 151.82926829268285], [243.0, 145.91095890410955], [244.0, 158.8345864661655], [245.0, 150.65625000000006], [246.0, 147.72486772486764], [247.0, 156.34112149532717], [248.0, 157.7887931034482], [249.0, 146.89910979228486], [250.0, 160.9319371727748], [251.0, 153.55238095238104], [252.0, 169.33000000000004], [253.0, 165.93859649122817], [254.0, 153.41017964071835], [255.0, 146.2051282051283], [257.0, 168.30000000000013], [256.0, 161.32743362831852], [259.0, 159.61538461538467], [258.0, 157.67136150234745], [260.0, 156.81538461538463], [261.0, 163.89361702127655], [262.0, 165.7319587628865], [263.0, 177.44776119402982], [264.0, 152.0], [268.0, 115.2], [265.0, 185.3194444444444], [266.0, 202.1911764705882], [267.0, 126.74193548387093], [1.0, 1.0]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[184.20043750000067, 114.07025000000034]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 268.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 150405.0, "minX": 1.729307727E12, "maxY": 971944.0, "series": [{"data": [[1.72930773E12, 951982.0], [1.729307729E12, 894031.0], [1.729307733E12, 794731.0], [1.729307731E12, 971944.0], [1.729307732E12, 939482.0], [1.729307735E12, 906780.0], [1.729307736E12, 909495.0], [1.729307734E12, 958521.0], [1.729307727E12, 474243.0], [1.729307728E12, 873746.0], [1.729307737E12, 661044.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72930773E12, 301920.0], [1.729307729E12, 283420.0], [1.729307733E12, 251970.0], [1.729307731E12, 308210.0], [1.729307732E12, 297850.0], [1.729307735E12, 287490.0], [1.729307736E12, 288230.0], [1.729307734E12, 303955.0], [1.729307727E12, 150405.0], [1.729307728E12, 276945.0], [1.729307737E12, 209605.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729307737E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9.048302872062662, "minX": 1.729307727E12, "maxY": 167.74967907573813, "series": [{"data": [[1.72930773E12, 86.86090686274518], [1.729307729E12, 9.048302872062662], [1.729307733E12, 165.28854625550653], [1.729307731E12, 122.98079231692694], [1.729307732E12, 132.03726708074493], [1.729307735E12, 154.8809523809525], [1.729307736E12, 167.74967907573813], [1.729307734E12, 152.8855751673763], [1.729307727E12, 71.2361623616236], [1.729307728E12, 52.84301937207753], [1.729307737E12, 120.62224183583419]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729307737E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.989556135770242, "minX": 1.729307727E12, "maxY": 167.62772785622582, "series": [{"data": [[1.72930773E12, 86.56311274509797], [1.729307729E12, 8.989556135770242], [1.729307733E12, 165.1042584434656], [1.729307731E12, 122.86314525810315], [1.729307732E12, 131.86273291925428], [1.729307735E12, 154.7567567567566], [1.729307736E12, 167.62772785622582], [1.729307734E12, 152.77115033475343], [1.729307727E12, 67.9717097170972], [1.729307728E12, 52.5804943219773], [1.729307737E12, 120.4439541041485]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729307737E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.009708737864077667, "minX": 1.729307727E12, "maxY": 5.61992619926199, "series": [{"data": [[1.72930773E12, 0.1587009803921569], [1.729307729E12, 0.2421671018276763], [1.729307733E12, 0.07562408223201189], [1.729307731E12, 0.14765906362545037], [1.729307732E12, 0.11614906832298147], [1.729307735E12, 0.0592020592020591], [1.729307736E12, 0.07702182284980762], [1.729307734E12, 0.09190505173463184], [1.729307727E12, 5.61992619926199], [1.729307728E12, 2.413493653974611], [1.729307737E12, 0.009708737864077667]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729307737E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.729307727E12, "maxY": 919.0, "series": [{"data": [[1.72930773E12, 428.0], [1.729307729E12, 231.0], [1.729307733E12, 637.0], [1.729307731E12, 672.0], [1.729307732E12, 475.0], [1.729307735E12, 637.0], [1.729307736E12, 919.0], [1.729307734E12, 695.0], [1.729307727E12, 214.0], [1.729307728E12, 258.0], [1.729307737E12, 754.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72930773E12, 138.0], [1.729307729E12, 21.0], [1.729307733E12, 282.0], [1.729307731E12, 234.29999999999995], [1.729307732E12, 230.0], [1.729307735E12, 283.5], [1.729307736E12, 300.0], [1.729307734E12, 285.0], [1.729307727E12, 137.60000000000002], [1.729307728E12, 133.0], [1.729307737E12, 252.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72930773E12, 324.02000000000044], [1.729307729E12, 50.0], [1.729307733E12, 492.8099999999986], [1.729307731E12, 377.65999999999985], [1.729307732E12, 361.77999999999975], [1.729307735E12, 539.45], [1.729307736E12, 553.0500000000004], [1.729307734E12, 498.1199999999999], [1.729307727E12, 207.86], [1.729307728E12, 176.0], [1.729307737E12, 478.32000000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72930773E12, 220.3499999999999], [1.729307729E12, 28.0], [1.729307733E12, 367.6999999999998], [1.729307731E12, 255.64999999999986], [1.729307732E12, 249.0], [1.729307735E12, 387.25], [1.729307736E12, 388.2999999999997], [1.729307734E12, 366.79999999999995], [1.729307727E12, 184.0], [1.729307728E12, 148.0], [1.729307737E12, 271.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72930773E12, 2.0], [1.729307729E12, 1.0], [1.729307733E12, 4.0], [1.729307731E12, 3.0], [1.729307732E12, 2.0], [1.729307735E12, 4.0], [1.729307736E12, 7.0], [1.729307734E12, 2.0], [1.729307727E12, 3.0], [1.729307728E12, 1.0], [1.729307737E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72930773E12, 89.5], [1.729307729E12, 5.0], [1.729307733E12, 155.0], [1.729307731E12, 123.5], [1.729307732E12, 128.0], [1.729307735E12, 150.0], [1.729307736E12, 164.0], [1.729307734E12, 149.0], [1.729307727E12, 68.0], [1.729307728E12, 33.0], [1.729307737E12, 109.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729307737E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 813.0, "maxY": 164.0, "series": [{"data": [[1133.0, 109.0], [1362.0, 155.0], [1497.0, 33.0], [1532.0, 5.0], [1554.0, 150.0], [1558.0, 164.0], [813.0, 68.0], [1632.0, 89.5], [1610.0, 128.0], [1643.0, 149.0], [1666.0, 123.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1666.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 813.0, "maxY": 164.0, "series": [{"data": [[1133.0, 109.0], [1362.0, 155.0], [1497.0, 33.0], [1532.0, 5.0], [1554.0, 150.0], [1558.0, 164.0], [813.0, 64.0], [1632.0, 89.5], [1610.0, 127.5], [1643.0, 149.0], [1666.0, 123.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1666.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 877.0, "minX": 1.729307727E12, "maxY": 1795.0, "series": [{"data": [[1.72930773E12, 1795.0], [1.729307729E12, 1586.0], [1.729307733E12, 1414.0], [1.729307731E12, 1650.0], [1.729307732E12, 1602.0], [1.729307735E12, 1565.0], [1.729307736E12, 1562.0], [1.729307734E12, 1631.0], [1.729307727E12, 982.0], [1.729307728E12, 1336.0], [1.729307737E12, 877.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729307737E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 813.0, "minX": 1.729307727E12, "maxY": 1666.0, "series": [{"data": [[1.72930773E12, 1632.0], [1.729307729E12, 1532.0], [1.729307733E12, 1362.0], [1.729307731E12, 1666.0], [1.729307732E12, 1610.0], [1.729307735E12, 1554.0], [1.729307736E12, 1558.0], [1.729307734E12, 1643.0], [1.729307727E12, 813.0], [1.729307728E12, 1497.0], [1.729307737E12, 1133.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.729307737E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 813.0, "minX": 1.729307727E12, "maxY": 1666.0, "series": [{"data": [[1.72930773E12, 1632.0], [1.729307729E12, 1532.0], [1.729307733E12, 1362.0], [1.729307731E12, 1666.0], [1.729307732E12, 1610.0], [1.729307735E12, 1554.0], [1.729307736E12, 1558.0], [1.729307734E12, 1643.0], [1.729307727E12, 813.0], [1.729307728E12, 1497.0], [1.729307737E12, 1133.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729307737E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 813.0, "minX": 1.729307727E12, "maxY": 1666.0, "series": [{"data": [[1.72930773E12, 1632.0], [1.729307729E12, 1532.0], [1.729307733E12, 1362.0], [1.729307731E12, 1666.0], [1.729307732E12, 1610.0], [1.729307735E12, 1554.0], [1.729307736E12, 1558.0], [1.729307734E12, 1643.0], [1.729307727E12, 813.0], [1.729307728E12, 1497.0], [1.729307737E12, 1133.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.729307737E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

